{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport history from '../myhistory';\nimport { SIGN_IN, SIGN_OUT, CREATE_REPORT, FETCH_REPORTS, FETCH_REPORT, DELETE_REPORT, EDIT_REPORT } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nconst BASEURL = '/api/v1'; //const BASEURL = 'https://medi-chart.herokuapp.com/api/v1'\n\nexport const createReport = formValues => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n\n  const report = _objectSpread(_objectSpread({}, formValues), {}, {\n    userId\n  });\n\n  const response = await fetch(BASEURL + '/reports', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      report: report\n    })\n  });\n  const reportJSON = await response.json();\n  dispatch({\n    type: CREATE_REPORT,\n    payload: reportJSON\n  });\n  history.push('/reports');\n};\nexport const fetchReports = () => async (dispatch, getState) => {\n  const response = await fetch(BASEURL + '/reports', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    }\n  });\n  const reportsJSON = await response.json();\n  dispatch({\n    type: FETCH_REPORTS,\n    payload: reportsJSON\n  });\n  history.push('/reports');\n};\nexport const fetchReport = id => async (dispatch, getState) => {\n  const response = await fetch(BASEURL + `/reports/${id}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    }\n  });\n  const reportJSON = await response.json();\n  dispatch({\n    type: FETCH_REPORT,\n    payload: reportJSON\n  });\n};\nexport const editReport = (id, formValues) => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n\n  const report = _objectSpread(_objectSpread({}, formValues), {}, {\n    userId\n  });\n\n  const response = await fetch(BASEURL + `/reports/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      report: report\n    })\n  });\n  const reportJSON = await response.json();\n  dispatch({\n    type: EDIT_REPORT,\n    payload: reportJSON\n  });\n  history.push('/reports');\n};\nexport const deleteReport = id => async (dispatch, getState) => {\n  await fetch(BASEURL + `/reports/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    }\n  });\n  dispatch({\n    type: DELETE_REPORT,\n    payload: id\n  });\n  history.push('/reports');\n};","map":{"version":3,"sources":["/Users/base/Desktop/medi-chart20/src/actions/index.js"],"names":["history","SIGN_IN","SIGN_OUT","CREATE_REPORT","FETCH_REPORTS","FETCH_REPORT","DELETE_REPORT","EDIT_REPORT","signIn","userId","type","payload","signOut","BASEURL","createReport","formValues","dispatch","getState","auth","report","response","fetch","method","headers","Accept","body","JSON","stringify","reportJSON","json","push","fetchReports","reportsJSON","fetchReport","id","editReport","deleteReport"],"mappings":"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","sourcesContent":["import history from '../myhistory'\nimport {\n  SIGN_IN,\n  SIGN_OUT,\n  CREATE_REPORT,\n  FETCH_REPORTS,\n  FETCH_REPORT,\n  DELETE_REPORT,\n  EDIT_REPORT\n} from './types'\n\nexport const signIn = (userId) => {\n    return {\n      type:SIGN_IN,\n      payload: userId\n    }\n}\n\nexport const signOut = () => {\n    return {\n      type:SIGN_OUT\n    }\n}\n\n\nconst BASEURL = '/api/v1'\n//const BASEURL = 'https://medi-chart.herokuapp.com/api/v1'\nexport const createReport = formValues => async (dispatch,\ngetState) => {\n\nconst {userId} = getState().auth\nconst report = {...formValues, userId}\n\n\nconst response = await fetch(BASEURL +'/reports', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    },\n\n    body: JSON.stringify({\n      report: report\n    })\n  })\n\n  const reportJSON = await response.json()\n\n    dispatch({\n      type: CREATE_REPORT,\n      payload: reportJSON\n    })\n    history.push('/reports')\n\n}\n\nexport const fetchReports = () => async (dispatch,\ngetState) => {\n\nconst response = await fetch(BASEURL+'/reports', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    }\n  })\n  const reportsJSON = await response.json()\n\n    dispatch({\n      type: FETCH_REPORTS,\n      payload: reportsJSON\n    })\n    history.push('/reports')\n}\n\nexport const fetchReport = (id) => async (dispatch,\ngetState) => {\n\nconst response = await fetch(BASEURL+`/reports/${id}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    }\n  })\n  const reportJSON = await response.json()\n\n    dispatch({\n      type: FETCH_REPORT,\n      payload: reportJSON\n    })\n}\n\nexport const editReport = (id, formValues) => async (dispatch,\ngetState) => {\n\nconst {userId} = getState().auth\nconst report = {...formValues, userId}\n\n\nconst response = await fetch(BASEURL+`/reports/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    },\n\n    body: JSON.stringify({\n      report: report\n    })\n  })\n\n  const reportJSON = await response.json()\n\n    dispatch({\n      type: EDIT_REPORT,\n      payload: reportJSON\n    })\n\n    history.push('/reports')\n\n}\n\nexport const deleteReport = (id) => async (dispatch,\ngetState) => {\n\nawait fetch(BASEURL+`/reports/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\"\n    },\n\n  })\n    dispatch({\n      type: DELETE_REPORT,\n      payload: id\n    })\n    history.push('/reports')\n}\n"]},"metadata":{},"sourceType":"module"}