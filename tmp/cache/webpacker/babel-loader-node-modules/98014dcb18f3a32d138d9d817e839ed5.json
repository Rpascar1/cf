{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass ReportForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"renderInput\", ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className\n      }, /*#__PURE__*/React.createElement(\"label\", null, label), /*#__PURE__*/React.createElement(\"input\", _extends({}, input, {\n        autoComplete: \"off\"\n      })), this.renderError(meta));\n    });\n\n    _defineProperty(this, \"renderInputTextArea\", ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className\n      }, /*#__PURE__*/React.createElement(\"label\", null, label), /*#__PURE__*/React.createElement(\"textarea\", _extends({}, input, {\n        autoComplete: \"off\"\n      })), this.renderError(meta));\n    });\n\n    _defineProperty(this, \"onSubmit\", formValues => {\n      this.props.onSubmit(formValues);\n    });\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\"\n      }, error));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit)\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"incidentLocation\",\n      component: this.renderInput,\n      label: \"Enter incident location\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"equal width fields\"\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"tripDate\",\n      component: this.renderInput,\n      label: \"Date:\"\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"dispatchTime\",\n      component: this.renderInput,\n      label: \"Dispatch Time:\"\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"onSceneTime\",\n      component: this.renderInput,\n      label: \"On Scene Time:\"\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"leftSceneTime\",\n      component: this.renderInput,\n      label: \"Left Scene Time:\"\n    })), /*#__PURE__*/React.createElement(Field, {\n      name: \"narrative\",\n      component: this.renderInputTextArea,\n      label: \"Narrative\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"equal width fields\"\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"arrivalDestTime\",\n      component: this.renderInput,\n      label: \"Arrived at destination Facility Time:\"\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"backInServiceTime\",\n      component: this.renderInput,\n      label: \"Back in Service Time:\"\n    })), /*#__PURE__*/React.createElement(Field, {\n      name: \"startMiles\",\n      component: this.renderInput,\n      label: \"Starting Mileage:\"\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"endMiles\",\n      component: this.renderInput,\n      label: \"Ending Mileage:\"\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"totalMiles\",\n      component: this.renderInput,\n      label: \"Total loaded mileage:\"\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"medicSig\",\n      component: this.renderInput,\n      label: \"Medic Electronic Signature:\"\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\"\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.incidentLocation) {\n    errors.incidentLocation = \"You must enter an incident location.\";\n  }\n\n  if (!formValues.narrative) {\n    errors.narrative = \"You must enter a narrative.\";\n  }\n\n  if (!formValues.dispatchTime) {\n    errors.dispatchTime = \"You must enter an incident location.\";\n  }\n\n  if (!formValues.onSceneTime) {\n    errors.onSceneTime = \"You must enter a time.\";\n  }\n\n  if (!formValues.arrivalDestTime) {\n    errors.arrivalDestTime = \"You must enter an incident location.\";\n  }\n\n  if (!formValues.leftSceneTime) {\n    errors.leftSceneTime = \"You must enter a time.\";\n  }\n\n  if (!formValues.backInServiceTime) {\n    errors.backInServiceTime = \"You must enter a time.\";\n  }\n\n  if (!formValues.startMiles) {\n    errors.startMiles = \"You must enter a narrative.\";\n  }\n\n  if (!formValues.endMiles) {\n    errors.endMiles = \"You must enter an incident location.\";\n  }\n\n  if (!formValues.totalMiles) {\n    errors.totalMiles = \"You must enter a narrative.\";\n  }\n\n  if (!formValues.medicSig) {\n    errors.medicSig = \"You must enter a narrative.\";\n  }\n\n  if (!formValues.facilityArrival) {\n    errors.facilityArrival = \"You must enter a time.\";\n  }\n\n  if (!formValues.tripDate) {\n    errors.tripDate = \"You must enter a date of transport.\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'reportForm',\n  validate\n})(ReportForm);","map":{"version":3,"sources":["/Users/base/Desktop/medi-chart20/src/components/reports/ReportForm.js"],"names":["React","Field","reduxForm","ReportForm","Component","input","label","meta","className","error","touched","renderError","formValues","props","onSubmit","render","handleSubmit","renderInput","renderInputTextArea","validate","errors","incidentLocation","narrative","dispatchTime","onSceneTime","arrivalDestTime","leftSceneTime","backInServiceTime","startMiles","endMiles","totalMiles","medicSig","facilityArrival","tripDate","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Field, reduxForm } from 'redux-form'\n\n\nclass ReportForm extends React.Component {\n\n    renderError({ error, touched }) {\n      if (touched && error) {\n        return (\n          <div className=\"ui error message\">\n            <div className=\"header\">{error}</div>\n            </div>\n                  )\n                }\n              }\n              renderInput = ({input, label, meta}) => {\n              const className =`field ${meta.error && meta.touched ? 'error' : ''}`\n\n                return (\n                  <div className={className}>\n                    <label>{label}</label>\n                    <input {...input} autoComplete=\"off\"/>\n                    {this.renderError(meta)}\n                  </div>\n                )\n            }\n\n            renderInputTextArea = ({input, label, meta}) => {\n            const className =`field ${meta.error && meta.touched ? 'error' : ''}`\n\n              return (\n                <div className={className}>\n                  <label>{label}</label>\n                  <textarea {...input} autoComplete=\"off\"/>\n                  {this.renderError(meta)}\n                </div>\n              )\n          }\n\n            onSubmit = (formValues) => {\n    \n              this.props.onSubmit(formValues)\n\n            }\n\n            render() {\n              return (\n\n                <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                  <Field name=\"incidentLocation\" component={this.renderInput} label=\"Enter incident location\"/>\n                  <div className=\"equal width fields\">\n                    <Field name=\"tripDate\" component={this.renderInput} label=\"Date:\"/>\n                    <Field name=\"dispatchTime\" component={this.renderInput} label=\"Dispatch Time:\"/>\n                    <Field name=\"onSceneTime\" component={this.renderInput} label=\"On Scene Time:\"/>\n                    <Field name=\"leftSceneTime\" component={this.renderInput} label=\"Left Scene Time:\"/>\n                  </div>\n                  <Field name=\"narrative\" component={this.renderInputTextArea} label=\"Narrative\"/>\n                  <div className=\"equal width fields\">\n                    <Field name=\"arrivalDestTime\" component={this.renderInput} label=\"Arrived at destination Facility Time:\"/>\n                    <Field name=\"backInServiceTime\" component={this.renderInput} label=\"Back in Service Time:\"/>\n                  </div>\n                  <Field name=\"startMiles\" component={this.renderInput} label=\"Starting Mileage:\"/>\n                  <Field name=\"endMiles\" component={this.renderInput} label=\"Ending Mileage:\"/>\n                  <Field name=\"totalMiles\" component={this.renderInput} label=\"Total loaded mileage:\"/>\n                  <Field name=\"medicSig\" component={this.renderInput} label=\"Medic Electronic Signature:\"/>\n                  <button className=\"ui button primary\">Submit</button>\n                </form>\n              )\n            }\n          }\n\n    const validate = (formValues)=>{\n      const errors={}\n\n      if(!formValues.incidentLocation){\n\n      errors.incidentLocation = \"You must enter an incident location.\"\n      }\n      if(!formValues.narrative){\n      errors.narrative = \"You must enter a narrative.\"\n      }\n      if(!formValues.dispatchTime){\n      errors.dispatchTime = \"You must enter an incident location.\"\n      }\n      if(!formValues.onSceneTime){\n      errors.onSceneTime = \"You must enter a time.\"\n      }\n      if(!formValues.arrivalDestTime){\n      errors.arrivalDestTime = \"You must enter an incident location.\"\n      }\n      if(!formValues.leftSceneTime){\n      errors.leftSceneTime = \"You must enter a time.\"\n      }\n      if(!formValues.backInServiceTime){\n      errors.backInServiceTime = \"You must enter a time.\"\n      }\n      if(!formValues.startMiles){\n      errors.startMiles = \"You must enter a narrative.\"\n      }\n      if(!formValues.endMiles){\n      errors.endMiles = \"You must enter an incident location.\"\n      }\n      if(!formValues.totalMiles){\n      errors.totalMiles = \"You must enter a narrative.\"\n      }\n      if(!formValues.medicSig){\n      errors.medicSig = \"You must enter a narrative.\"\n      }\n      if(!formValues.facilityArrival){\n      errors.facilityArrival = \"You must enter a time.\"\n      }\n      if(!formValues.tripDate){\n      errors.tripDate = \"You must enter a date of transport.\"\n      }\n      return errors\n    }\n\n    export default reduxForm({\n      form: 'reportForm',\n      validate\n    })(ReportForm)\n"]},"metadata":{},"sourceType":"module"}